package com.device.vulnerability.test;

import android.app.ProgressDialog;
import android.content.Context;
import android.os.AsyncTask;
import android.util.Log;

import java.util.ArrayList;
import java.util.List;

import com.device.vulnerability.vulnerabilities.VulnerabilityOrganizer;
import com.device.vulnerability.vulnerabilities.VulnerabilityTest;

public class VulnerabilityTestRunner extends AsyncTask<Void,Integer,List<VulnerabilityTestResult>> {
    private final Boolean mShowWaitDiaglog;
    private ProgressDialog mProgressDialog;
    private final ResultsCallback mCustomCallback;
    private final Context mCtx;

    private static String TAG = "VULN_TEST";

    public VulnerabilityTestRunner(Context actv, Boolean showScanDialog, ResultsCallback callback){
        mCtx = actv;
        mShowWaitDiaglog = showScanDialog;
        mCustomCallback = callback;
    }

    protected void onProgressUpdate(String... progress) {
        if(mShowWaitDiaglog) {
            Log.d("ANDRO_ASYNC", progress[0]);
            mProgressDialog.setProgress(Integer.parseInt(progress[0]));
        }
    }


    @Override
    protected void onPreExecute()
    {
        if(mShowWaitDiaglog)
            mProgressDialog = ProgressDialog.show(mCtx, "Device Vulnerability Checker", "Checking device for publically known com.device.vulnerability.vulnerabilities", false);
    }

    @Override
    protected List<VulnerabilityTestResult> doInBackground(Void... params)
    {
        Log.d(TAG, "Async execute called!!!!");

        List<VulnerabilityTest> tests = VulnerabilityOrganizer.getTests();
        List<VulnerabilityTestResult> results = new ArrayList<VulnerabilityTestResult>();

        for(int i = 0; i < tests.size(); i++){
            VulnerabilityTest test = tests.get(i);
            Exception x = null;
            boolean isVuln = false;
            try {
                isVuln = test.isVulnerable(mCtx);
            }catch(Exception e){
              e.printStackTrace();
            }

            results.add(new VulnerabilityTestResult(test, isVuln, x));
        }

        return results;
    }

    @Override
    protected void onPostExecute(List<VulnerabilityTestResult> vulnerabilityResults)
    {
        super.onPostExecute(vulnerabilityResults);
        if(mCustomCallback != null)
            mCustomCallback.finished(vulnerabilityResults);

        if(mShowWaitDiaglog)
            mProgressDialog.dismiss();
    }


}