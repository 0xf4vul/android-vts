package vulnerabilities.framework.jar;

import android.content.Context;
import android.util.Log;

import java.io.File;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.zip.ZipFile;

import java.security.cert.Certificate;
import java.security.cert.X509Certificate;

import util.jar.JarEntry;
import util.jar.JarFile;
import vulnerabilities.VulnerabilityTest;

// https://android.googlesource.com/platform/libcore/+/cb11b9fff2a1af8bb4fcad18986003a7f59189c6 //Tests
// https://android.googlesource.com/platform/libcore/+/2bc5e811a817a8c667bca4318ae98582b0ee6dc6 //Fix
// http://bluebox.com/technical/android-fake-id-vulnerability/

public class JarBug13678484 implements VulnerabilityTest {

    private Certificate[] getSignedJarCerts(String jarName, boolean chainCheck) throws Exception {

        File file = new File(jarName);
        Certificate[] foundCerts = null;

        JarFile jarFile = new JarFile(file, true, ZipFile.OPEN_READ, chainCheck);
        try {

            Enumeration<JarEntry> e = jarFile.entries();
            while (e.hasMoreElements()) {
                JarEntry entry = e.nextElement();
                InputStream is = jarFile.getInputStream(entry);
                // Skip bytes because we have to read the entire file for it to read signatures.
                is.skip(entry.getSize());
                is.close();
                Certificate[] certs = entry.getCertificates();
                if (certs != null && certs.length > 0) {
                    foundCerts = certs;
                    break;
                }
            }
        } finally {
            jarFile.close();
        }

        return foundCerts;
    }

    @Override
    public String getName() {
        return "JarBug13678484";
    }

    @Override
    public boolean isVulnerable(Context context) throws Exception {

        Log.d("CERTValidator", "checking the jar certs with chain validation");

        Certificate[] certs = getSignedJarCerts("/data/local/tmp/test.jar", true);
        for(Certificate c: certs)
          Log.d("CERTValidator", ((X509Certificate)c).getSubjectDN().toString());

        Log.d("CERTValidator", "Now without the chainvalidation");

        Certificate[] certsfalse = getSignedJarCerts("/data/local/tmp/test.jar", false);
        for(Certificate c: certsfalse)
            Log.d("CERTValidator", ((X509Certificate)c).getSubjectDN().toString());
        return false;
    }

/*
    public void testJarFile_Signed_ValidChain_NoCheck() throws Exception {
        Certificate[] certs = getSignedJarCerts(VALID_CHAIN_JAR, false);
        if(certs == null){
            //bad
        }

        assertEquals(Arrays.deepToString(certs), 3, certs.length);
        assertEquals("CN=fake-chain", ((X509Certificate) certs[0]).getSubjectDN().toString());
        assertEquals("CN=intermediate1", ((X509Certificate) certs[1]).getSubjectDN().toString());
        assertEquals("CN=root1", ((X509Certificate) certs[2]).getSubjectDN().toString());
    }

    public void testJarFile_Signed_ValidChain_Check() throws Exception {
        Certificate[] certs = getSignedJarCerts(VALID_CHAIN_JAR, true);
        assertNotNull(certs);
        assertEquals(Arrays.deepToString(certs), 3, certs.length);
        assertEquals("CN=fake-chain", ((X509Certificate) certs[0]).getSubjectDN().toString());
        assertEquals("CN=intermediate1", ((X509Certificate) certs[1]).getSubjectDN().toString());
        assertEquals("CN=root1", ((X509Certificate) certs[2]).getSubjectDN().toString());
    }

    public void testJarFile_Signed_InvalidChain_NoCheck() throws Exception {
        Certificate[] certs = getSignedJarCerts(INVALID_CHAIN_JAR, false);
        assertNotNull(certs);
        assertEquals(Arrays.deepToString(certs), 3, certs.length);
        assertEquals("CN=fake-chain", ((X509Certificate) certs[0]).getSubjectDN().toString());
        assertEquals("CN=intermediate1", ((X509Certificate) certs[1]).getSubjectDN().toString());
        assertEquals("CN=root1", ((X509Certificate) certs[2]).getSubjectDN().toString());
    }

    public void testJarFile_Signed_InvalidChain_Check() throws Exception {
        Certificate[] certs = getSignedJarCerts(INVALID_CHAIN_JAR, true);
        assertNotNull(certs);
        assertEquals(Arrays.deepToString(certs), 2, certs.length);
        assertEquals("CN=fake-chain", ((X509Certificate) certs[0]).getSubjectDN().toString());
        assertEquals("CN=intermediate1", ((X509Certificate) certs[1]).getSubjectDN().toString());
    }
    */
}
